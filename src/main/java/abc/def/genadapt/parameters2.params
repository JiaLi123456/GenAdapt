# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

#tells the Evaluator how many threads to spawn when evaluating.
evalthreads = 				1
#tells the Breeder how many threads to spawn when breeding.
breedthreads = 				1
#Each thread will be given its own unique random number generator.
# seed.0 = 				4357
seed.0 =				time

checkpoint =				false
checkpoint-modulo =         1
checkpoint-prefix = 	    ec

# We're using the standard (empty) exchange method, which does nothing to the Population at all
exch = 					ec.simple.SimpleExchanger
# We're using standard breeding
breed =					ec.simple.SimpleBreeder
state = 				ec.simple.SimpleEvolutionState
breed.elite-fraction.0 = 0.25
# We're using standard evaluation -- no coevolution
eval =					ec.simple.SimpleEvaluator
# We're using simple statistics
stat =					ec.gp.koza.KozaShortStatistics
stat.file = /dev/null
stat.silent.front = true

# generation number
generations =				200
#tells us whether or not we should quit ECJ when it finds an ideal individual;
#otherwise it will continue until it runs out of generations.
quit-on-run-complete =			true

pop = 					ec.Population
pop.subpops =				1
pop.subpop.0 = 				ec.Subpopulation
pop.subpop.0.size =			10

pop.subpop.0.species.fitness = abc.def.genadapt.Fitness
init = ec.gp.GPInitializer

# does nothing at all
finish = 	        		ec.simple.SimpleFinisher

pop.subpop.0.species = ec.gp.GPSpecies
pop.subpop.0.species.ind = ec.gp.GPIndividual
#a single tree per GPIndividual
pop.subpop.0.species.ind.numtrees = 1
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree

#GPTreeConstraints
gp.tc.size = 1
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
# the root GPNode of the tree must have its return type compatible with nil.
gp.tc.0.returns = nil
#generates arbitrary trees depth-ﬁrst using Koza’s RAMPED HALF-AND-HALF algorithm. You cannot request a size.
gp.tc.0.init = ec.gp.koza.HalfBuilder
gp.tc.0.init.min-depth = 2
gp.tc.0.init.max-depth = 5
gp.tc.0.init.growp = 0.5

pop.subpop.0.species.ind.tree.0.tc = tc0
#acommonBreedingPipelineusedingenetic programming
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.7
#requests the same number from its single source, then simply returns them (copying if necessary)
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.1

# Reproduction
breed.reproduce.source.0 = ec.select.TournamentSelection
# Crossover
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same

# picks certain kinds of nodes with different probabilities
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = ec.gp.koza.KozaNodeSelector
gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0
#if the crossover operation produces a child greater than 17, it is not forwarded on
#but rather its (presumably smaller) parent is forwarded on in its stead
gp.koza.xover.maxdepth = 15
gp.koza.xover.tries = 1

pop.subpop.0.species.pipe.source.2 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.1
#ec.gp.koza.MutationPipeline performs standard subtree mutation: it requests a GPIndividual
#from a single source; then a tree is selected; then a node is selected in that tree; and
#finally the subtree rooted by that node is replaced in its entirety by a randomly-generated tree.
gp.koza.mutate.source.0 = ec.select.TournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
# ec.gp.koza.GrowBuilder generates arbitrary trees depth-ﬁrst using Koza’s GROW algorithm.
#You cannot request a size. It requires a minimum and maximum depth
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 15
gp.koza.mutate.tries = 1
gp.koza.mutate.tree.0=0
gp.koza.mutate.pipe.ns=ec.gp.koza.KozaNodeSelector
gp.koza.mutate.equal=true
#The replacing subtree is generated using a GPNodeBuilder.
gp.koza.grow.min-depth = 4
gp.koza.grow.max-depth = 15

select.tournament.size = 7

#Automatically Deﬁned Functions (ADFs) are a standard way of creating some modularism in Genetic Programming
gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext

#define a type nil
gp.type.a.size = 1
gp.type.a.0.name = nil
#define 0 type set
gp.type.s.size = 0

# Node Constraints
gp.nc.size = 2

gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.returns = nil
gp.nc.0.size = 0

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc1
gp.nc.1.returns = nil
gp.nc.1.size = 2
gp.nc.1.child.0 = nil
gp.nc.1.child.1 = nil

#print style
gp.tree.print-style = c

#for ERC numbers (const parameters in the tree)
pop.subpop.0.species.pipe.ns.0=ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.tree.0=0
gp.breed.mutate-all-node.ns.0=ec.gp.koza.KozaNodeSelector
gp.breed.mutate-all-node.tree.0=0
gp.breed.mutate-erc.tries=1
gp.breed.mutate-erc.tree.0=0
gp.breed.mutate-erc.source.0

# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name = f0

pop.subpop.0.duplicate-retries = 10

#print style
gp.tree.print-style = c

# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name = f0

# We have five functions in the function set.  They are:
gp.fs.0.size = 8
gp.fs.0.func.0 = abc.def.genadapt.X
gp.fs.0.func.0.nc = nc0
gp.fs.0.func.1 = abc.def.genadapt.Y
gp.fs.0.func.1.nc = nc0
gp.fs.0.func.7 = abc.def.genadapt.Z
gp.fs.0.func.7.nc = nc0
gp.fs.0.func.2 = abc.def.genadapt.Add
gp.fs.0.func.2.nc = nc1
gp.fs.0.func.3 = abc.def.genadapt.Sub
gp.fs.0.func.3.nc = nc1
gp.fs.0.func.4 = abc.def.genadapt.Mul
gp.fs.0.func.4.nc = nc1
gp.fs.0.func.5 = abc.def.genadapt.Div
gp.fs.0.func.5.nc = nc1
gp.fs.0.func.6 = abc.def.genadapt.MyERC
gp.fs.0.func.6.nc = nc0

eval.problem = abc.def.genadapt.CongestionProblem
eval.problem.data = abc.def.genadapt.DoubleData

